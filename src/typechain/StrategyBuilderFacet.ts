/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StrategyBuilderLib {
  export type TacticStruct = {
    functionSelector: BytesLike;
    functionCallData: BytesLike;
  };

  export type TacticStructOutput = [
    functionSelector: string,
    functionCallData: string
  ] & { functionSelector: string; functionCallData: string };

  export type ConditionStruct = {
    conditionAddress: AddressLike;
    id: BigNumberish;
    goToA: BigNumberish;
    goToB: BigNumberish;
  };

  export type ConditionStructOutput = [
    conditionAddress: string,
    id: bigint,
    goToA: bigint,
    goToB: bigint
  ] & { conditionAddress: string; id: bigint; goToA: bigint; goToB: bigint };

  export type StrategyStepStruct = {
    conditionId: BigNumberish;
    tacticIds: BigNumberish[];
  };

  export type StrategyStepStructOutput = [
    conditionId: bigint,
    tacticIds: bigint[]
  ] & { conditionId: bigint; tacticIds: bigint[] };
}

export interface StrategyBuilderFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "VERSION"
      | "addStrategy"
      | "executeStrategy"
      | "getCondition"
      | "getIndex"
      | "getStep"
      | "getStrategy"
      | "getTactic"
      | "removeStrategy"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "VERSION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [
      BigNumberish,
      StrategyBuilderLib.TacticStruct[],
      StrategyBuilderLib.ConditionStruct[],
      BigNumberish[],
      boolean[]
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCondition",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getIndex",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStep",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getTactic",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "VERSION", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCondition",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getIndex", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getStep", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getTactic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
}

export interface StrategyBuilderFacet extends BaseContract {
  connect(runner?: ContractRunner | null): StrategyBuilderFacet;
  waitForDeployment(): Promise<this>;

  interface: StrategyBuilderFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  VERSION: TypedContractMethod<[], [string], "view">;

  addStrategy: TypedContractMethod<
    [
      strategyId: BigNumberish,
      tactics: StrategyBuilderLib.TacticStruct[],
      conditions: StrategyBuilderLib.ConditionStruct[],
      tacticNumbers: BigNumberish[],
      hasConditions: boolean[]
    ],
    [void],
    "nonpayable"
  >;

  executeStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getCondition: TypedContractMethod<
    [conditionId: BigNumberish],
    [StrategyBuilderLib.ConditionStructOutput],
    "view"
  >;

  getIndex: TypedContractMethod<
    [strategyId: BigNumberish, position: BigNumberish],
    [bigint],
    "view"
  >;

  getStep: TypedContractMethod<
    [stepId: BigNumberish],
    [StrategyBuilderLib.StrategyStepStructOutput],
    "view"
  >;

  getStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [bigint],
    "view"
  >;

  getTactic: TypedContractMethod<
    [tacticId: BigNumberish],
    [StrategyBuilderLib.TacticStructOutput],
    "view"
  >;

  removeStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "VERSION"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [
      strategyId: BigNumberish,
      tactics: StrategyBuilderLib.TacticStruct[],
      conditions: StrategyBuilderLib.ConditionStruct[],
      tacticNumbers: BigNumberish[],
      hasConditions: boolean[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getCondition"
  ): TypedContractMethod<
    [conditionId: BigNumberish],
    [StrategyBuilderLib.ConditionStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getIndex"
  ): TypedContractMethod<
    [strategyId: BigNumberish, position: BigNumberish],
    [bigint],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStep"
  ): TypedContractMethod<
    [stepId: BigNumberish],
    [StrategyBuilderLib.StrategyStepStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [bigint], "view">;
  getFunction(
    nameOrSignature: "getTactic"
  ): TypedContractMethod<
    [tacticId: BigNumberish],
    [StrategyBuilderLib.TacticStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [void], "nonpayable">;

  filters: {};
}
