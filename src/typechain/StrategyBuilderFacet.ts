/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace StrategyBuilderLib {
  export type TacticStruct = {
    functionSelector: BytesLike;
    functionCallData: BytesLike;
    value: BigNumberish;
  };

  export type TacticStructOutput = [
    functionSelector: string,
    functionCallData: string,
    value: bigint
  ] & { functionSelector: string; functionCallData: string; value: bigint };
}

export interface StrategyBuilderFacetInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addStrategy"
      | "executeStrategy"
      | "getStrategy"
      | "removeStrategy"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "StrategyAdded" | "StrategyRemoved"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addStrategy",
    values: [BigNumberish, StrategyBuilderLib.TacticStruct[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "removeStrategy",
    values: [BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "addStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeStrategy",
    data: BytesLike
  ): Result;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [
    id: BigNumberish,
    tactics: StrategyBuilderLib.TacticStruct[]
  ];
  export type OutputTuple = [
    id: bigint,
    tactics: StrategyBuilderLib.TacticStructOutput[]
  ];
  export interface OutputObject {
    id: bigint;
    tactics: StrategyBuilderLib.TacticStructOutput[];
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyRemovedEvent {
  export type InputTuple = [id: BigNumberish];
  export type OutputTuple = [id: bigint];
  export interface OutputObject {
    id: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrategyBuilderFacet extends BaseContract {
  connect(runner?: ContractRunner | null): StrategyBuilderFacet;
  waitForDeployment(): Promise<this>;

  interface: StrategyBuilderFacetInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addStrategy: TypedContractMethod<
    [strategyId: BigNumberish, tactics: StrategyBuilderLib.TacticStruct[]],
    [void],
    "nonpayable"
  >;

  executeStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [StrategyBuilderLib.TacticStructOutput[]],
    "view"
  >;

  removeStrategy: TypedContractMethod<
    [strategyId: BigNumberish],
    [void],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addStrategy"
  ): TypedContractMethod<
    [strategyId: BigNumberish, tactics: StrategyBuilderLib.TacticStruct[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "getStrategy"
  ): TypedContractMethod<
    [strategyId: BigNumberish],
    [StrategyBuilderLib.TacticStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeStrategy"
  ): TypedContractMethod<[strategyId: BigNumberish], [void], "nonpayable">;

  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyRemoved"
  ): TypedContractEvent<
    StrategyRemovedEvent.InputTuple,
    StrategyRemovedEvent.OutputTuple,
    StrategyRemovedEvent.OutputObject
  >;

  filters: {
    "StrategyAdded(uint256,tuple[])": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyRemoved(uint256)": TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
    StrategyRemoved: TypedContractEvent<
      StrategyRemovedEvent.InputTuple,
      StrategyRemovedEvent.OutputTuple,
      StrategyRemovedEvent.OutputObject
    >;
  };
}
