/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type UserOperationStruct = {
  sender: AddressLike;
  nonce: BigNumberish;
  initCode: BytesLike;
  callData: BytesLike;
  callGasLimit: BigNumberish;
  verificationGasLimit: BigNumberish;
  preVerificationGas: BigNumberish;
  maxFeePerGas: BigNumberish;
  maxPriorityFeePerGas: BigNumberish;
  paymasterAndData: BytesLike;
  signature: BytesLike;
};

export type UserOperationStructOutput = [
  sender: string,
  nonce: bigint,
  initCode: string,
  callData: string,
  callGasLimit: bigint,
  verificationGasLimit: bigint,
  preVerificationGas: bigint,
  maxFeePerGas: bigint,
  maxPriorityFeePerGas: bigint,
  paymasterAndData: string,
  signature: string
] & {
  sender: string;
  nonce: bigint;
  initCode: string;
  callData: string;
  callGasLimit: bigint;
  verificationGasLimit: bigint;
  preVerificationGas: bigint;
  maxFeePerGas: bigint;
  maxPriorityFeePerGas: bigint;
  paymasterAndData: string;
  signature: string;
};

export interface SmartStrategyWalletInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addOwner"
      | "concatenateBytes"
      | "entryPoint"
      | "execute"
      | "executeAsSigner"
      | "executeBatch"
      | "executeBatchAsSigner"
      | "executeStrategy"
      | "executeTactic"
      | "getNonce"
      | "getStorageSlot"
      | "getStrategy"
      | "getStrategyBuilderAddress"
      | "getValue"
      | "getWalletFactory"
      | "initialize"
      | "isOwner"
      | "onERC1155BatchReceived"
      | "onERC1155Received"
      | "onERC721Received"
      | "removeOwner"
      | "setStrategy"
      | "setStrategyBuilder"
      | "setStrategyWithInputs"
      | "setTacticValue"
      | "supportsInterface"
      | "tokensReceived"
      | "validateUserOp"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic:
      | "Initialized"
      | "OwnerAdded"
      | "OwnerRemoved"
      | "StrategyAdded"
      | "StrategyBuilderSetup"
      | "WalletInitialized"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "concatenateBytes",
    values: [BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "entryPoint",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "execute",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeAsSigner",
    values: [AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatch",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeBatchAsSigner",
    values: [AddressLike[], BigNumberish[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "executeStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "executeTactic",
    values: [AddressLike, BytesLike, BytesLike[]]
  ): string;
  encodeFunctionData(functionFragment: "getNonce", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getStorageSlot",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategy",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getStrategyBuilderAddress",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "getValue", values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: "getWalletFactory",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [AddressLike, AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155BatchReceived",
    values: [
      AddressLike,
      AddressLike,
      BigNumberish[],
      BigNumberish[],
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC1155Received",
    values: [AddressLike, AddressLike, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "onERC721Received",
    values: [AddressLike, AddressLike, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "removeOwner",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategy",
    values: [BytesLike[], BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyBuilder",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "setStrategyWithInputs",
    values: [BytesLike[], BigNumberish, BytesLike[], BytesLike[]]
  ): string;
  encodeFunctionData(
    functionFragment: "setTacticValue",
    values: [AddressLike, BigNumberish, BigNumberish, BigNumberish, BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "supportsInterface",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "tokensReceived",
    values: [
      AddressLike,
      AddressLike,
      AddressLike,
      BigNumberish,
      BytesLike,
      BytesLike
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "validateUserOp",
    values: [UserOperationStruct, BytesLike, BigNumberish]
  ): string;

  decodeFunctionResult(functionFragment: "addOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "concatenateBytes",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "entryPoint", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "execute", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "executeAsSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatch",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeBatchAsSigner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeTactic",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getNonce", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getStorageSlot",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getStrategyBuilderAddress",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getValue", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getWalletFactory",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "isOwner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155BatchReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC1155Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "onERC721Received",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "removeOwner",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyBuilder",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setStrategyWithInputs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setTacticValue",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "supportsInterface",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "tokensReceived",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateUserOp",
    data: BytesLike
  ): Result;
}

export namespace InitializedEvent {
  export type InputTuple = [version: BigNumberish];
  export type OutputTuple = [version: bigint];
  export interface OutputObject {
    version: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerAddedEvent {
  export type InputTuple = [newOwner: AddressLike];
  export type OutputTuple = [newOwner: string];
  export interface OutputObject {
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace OwnerRemovedEvent {
  export type InputTuple = [removedOwner: AddressLike];
  export type OutputTuple = [removedOwner: string];
  export interface OutputObject {
    removedOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyAddedEvent {
  export type InputTuple = [strategyID: BigNumberish, strategy: BytesLike];
  export type OutputTuple = [strategyID: bigint, strategy: string];
  export interface OutputObject {
    strategyID: bigint;
    strategy: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace StrategyBuilderSetupEvent {
  export type InputTuple = [strategyBuilderAddress: AddressLike];
  export type OutputTuple = [strategyBuilderAddress: string];
  export interface OutputObject {
    strategyBuilderAddress: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace WalletInitializedEvent {
  export type InputTuple = [entryPoint: AddressLike, creator: AddressLike];
  export type OutputTuple = [entryPoint: string, creator: string];
  export interface OutputObject {
    entryPoint: string;
    creator: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface SmartStrategyWallet extends BaseContract {
  connect(runner?: ContractRunner | null): SmartStrategyWallet;
  waitForDeployment(): Promise<this>;

  interface: SmartStrategyWalletInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addOwner: TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;

  concatenateBytes: TypedContractMethod<
    [byteArray: BytesLike[]],
    [string],
    "view"
  >;

  entryPoint: TypedContractMethod<[], [string], "view">;

  execute: TypedContractMethod<
    [dest: AddressLike, value: BigNumberish, func: BytesLike],
    [void],
    "nonpayable"
  >;

  executeAsSigner: TypedContractMethod<
    [dest: AddressLike, value: BigNumberish, func: BytesLike],
    [void],
    "nonpayable"
  >;

  executeBatch: TypedContractMethod<
    [dests: AddressLike[], values: BigNumberish[], funcs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  executeBatchAsSigner: TypedContractMethod<
    [dests: AddressLike[], values: BigNumberish[], funcs: BytesLike[]],
    [void],
    "nonpayable"
  >;

  executeStrategy: TypedContractMethod<
    [strategyID: BigNumberish],
    [void],
    "nonpayable"
  >;

  executeTactic: TypedContractMethod<
    [
      tacticLibrary: AddressLike,
      functionSelector: BytesLike,
      arguments: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  getNonce: TypedContractMethod<[], [bigint], "view">;

  getStorageSlot: TypedContractMethod<
    [
      libAddress: AddressLike,
      argument: BigNumberish,
      strategyID: BigNumberish,
      tacticPosition: BigNumberish
    ],
    [string],
    "view"
  >;

  getStrategy: TypedContractMethod<
    [strategyID: BigNumberish],
    [string],
    "view"
  >;

  getStrategyBuilderAddress: TypedContractMethod<[], [string], "view">;

  getValue: TypedContractMethod<[storageSlot: BytesLike], [string], "view">;

  getWalletFactory: TypedContractMethod<[], [string], "view">;

  initialize: TypedContractMethod<
    [creator: AddressLike, strategyBuilder: AddressLike],
    [void],
    "nonpayable"
  >;

  isOwner: TypedContractMethod<[account: AddressLike], [boolean], "view">;

  onERC1155BatchReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC1155Received: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;

  onERC721Received: TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;

  removeOwner: TypedContractMethod<
    [ownerToRemove: AddressLike],
    [void],
    "nonpayable"
  >;

  setStrategy: TypedContractMethod<
    [strategyByteArray: BytesLike[], strategyID: BigNumberish],
    [void],
    "nonpayable"
  >;

  setStrategyBuilder: TypedContractMethod<
    [strategyBuilderAddress: AddressLike],
    [void],
    "nonpayable"
  >;

  setStrategyWithInputs: TypedContractMethod<
    [
      strategyByteArray: BytesLike[],
      strategyID: BigNumberish,
      storageSlots: BytesLike[],
      inputs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;

  setTacticValue: TypedContractMethod<
    [
      libAddress: AddressLike,
      argument: BigNumberish,
      strategyID: BigNumberish,
      tacticPosition: BigNumberish,
      input: BytesLike
    ],
    [void],
    "nonpayable"
  >;

  supportsInterface: TypedContractMethod<
    [interfaceId: BytesLike],
    [boolean],
    "view"
  >;

  tokensReceived: TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;

  validateUserOp: TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addOwner"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "concatenateBytes"
  ): TypedContractMethod<[byteArray: BytesLike[]], [string], "view">;
  getFunction(
    nameOrSignature: "entryPoint"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "execute"
  ): TypedContractMethod<
    [dest: AddressLike, value: BigNumberish, func: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeAsSigner"
  ): TypedContractMethod<
    [dest: AddressLike, value: BigNumberish, func: BytesLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBatch"
  ): TypedContractMethod<
    [dests: AddressLike[], values: BigNumberish[], funcs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeBatchAsSigner"
  ): TypedContractMethod<
    [dests: AddressLike[], values: BigNumberish[], funcs: BytesLike[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "executeStrategy"
  ): TypedContractMethod<[strategyID: BigNumberish], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "executeTactic"
  ): TypedContractMethod<
    [
      tacticLibrary: AddressLike,
      functionSelector: BytesLike,
      arguments: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getNonce"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "getStorageSlot"
  ): TypedContractMethod<
    [
      libAddress: AddressLike,
      argument: BigNumberish,
      strategyID: BigNumberish,
      tacticPosition: BigNumberish
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "getStrategy"
  ): TypedContractMethod<[strategyID: BigNumberish], [string], "view">;
  getFunction(
    nameOrSignature: "getStrategyBuilderAddress"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "getValue"
  ): TypedContractMethod<[storageSlot: BytesLike], [string], "view">;
  getFunction(
    nameOrSignature: "getWalletFactory"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "initialize"
  ): TypedContractMethod<
    [creator: AddressLike, strategyBuilder: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "isOwner"
  ): TypedContractMethod<[account: AddressLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "onERC1155BatchReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish[],
      arg3: BigNumberish[],
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC1155Received"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: BigNumberish,
      arg3: BigNumberish,
      arg4: BytesLike
    ],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "onERC721Received"
  ): TypedContractMethod<
    [arg0: AddressLike, arg1: AddressLike, arg2: BigNumberish, arg3: BytesLike],
    [string],
    "view"
  >;
  getFunction(
    nameOrSignature: "removeOwner"
  ): TypedContractMethod<[ownerToRemove: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "setStrategy"
  ): TypedContractMethod<
    [strategyByteArray: BytesLike[], strategyID: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategyBuilder"
  ): TypedContractMethod<
    [strategyBuilderAddress: AddressLike],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setStrategyWithInputs"
  ): TypedContractMethod<
    [
      strategyByteArray: BytesLike[],
      strategyID: BigNumberish,
      storageSlots: BytesLike[],
      inputs: BytesLike[]
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "setTacticValue"
  ): TypedContractMethod<
    [
      libAddress: AddressLike,
      argument: BigNumberish,
      strategyID: BigNumberish,
      tacticPosition: BigNumberish,
      input: BytesLike
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "supportsInterface"
  ): TypedContractMethod<[interfaceId: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "tokensReceived"
  ): TypedContractMethod<
    [
      arg0: AddressLike,
      arg1: AddressLike,
      arg2: AddressLike,
      arg3: BigNumberish,
      arg4: BytesLike,
      arg5: BytesLike
    ],
    [void],
    "view"
  >;
  getFunction(
    nameOrSignature: "validateUserOp"
  ): TypedContractMethod<
    [
      userOp: UserOperationStruct,
      userOpHash: BytesLike,
      missingAccountFunds: BigNumberish
    ],
    [bigint],
    "nonpayable"
  >;

  getEvent(
    key: "Initialized"
  ): TypedContractEvent<
    InitializedEvent.InputTuple,
    InitializedEvent.OutputTuple,
    InitializedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerAdded"
  ): TypedContractEvent<
    OwnerAddedEvent.InputTuple,
    OwnerAddedEvent.OutputTuple,
    OwnerAddedEvent.OutputObject
  >;
  getEvent(
    key: "OwnerRemoved"
  ): TypedContractEvent<
    OwnerRemovedEvent.InputTuple,
    OwnerRemovedEvent.OutputTuple,
    OwnerRemovedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyAdded"
  ): TypedContractEvent<
    StrategyAddedEvent.InputTuple,
    StrategyAddedEvent.OutputTuple,
    StrategyAddedEvent.OutputObject
  >;
  getEvent(
    key: "StrategyBuilderSetup"
  ): TypedContractEvent<
    StrategyBuilderSetupEvent.InputTuple,
    StrategyBuilderSetupEvent.OutputTuple,
    StrategyBuilderSetupEvent.OutputObject
  >;
  getEvent(
    key: "WalletInitialized"
  ): TypedContractEvent<
    WalletInitializedEvent.InputTuple,
    WalletInitializedEvent.OutputTuple,
    WalletInitializedEvent.OutputObject
  >;

  filters: {
    "Initialized(uint8)": TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;
    Initialized: TypedContractEvent<
      InitializedEvent.InputTuple,
      InitializedEvent.OutputTuple,
      InitializedEvent.OutputObject
    >;

    "OwnerAdded(address)": TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;
    OwnerAdded: TypedContractEvent<
      OwnerAddedEvent.InputTuple,
      OwnerAddedEvent.OutputTuple,
      OwnerAddedEvent.OutputObject
    >;

    "OwnerRemoved(address)": TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;
    OwnerRemoved: TypedContractEvent<
      OwnerRemovedEvent.InputTuple,
      OwnerRemovedEvent.OutputTuple,
      OwnerRemovedEvent.OutputObject
    >;

    "StrategyAdded(uint8,bytes)": TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;
    StrategyAdded: TypedContractEvent<
      StrategyAddedEvent.InputTuple,
      StrategyAddedEvent.OutputTuple,
      StrategyAddedEvent.OutputObject
    >;

    "StrategyBuilderSetup(address)": TypedContractEvent<
      StrategyBuilderSetupEvent.InputTuple,
      StrategyBuilderSetupEvent.OutputTuple,
      StrategyBuilderSetupEvent.OutputObject
    >;
    StrategyBuilderSetup: TypedContractEvent<
      StrategyBuilderSetupEvent.InputTuple,
      StrategyBuilderSetupEvent.OutputTuple,
      StrategyBuilderSetupEvent.OutputObject
    >;

    "WalletInitialized(address,address)": TypedContractEvent<
      WalletInitializedEvent.InputTuple,
      WalletInitializedEvent.OutputTuple,
      WalletInitializedEvent.OutputObject
    >;
    WalletInitialized: TypedContractEvent<
      WalletInitializedEvent.InputTuple,
      WalletInitializedEvent.OutputTuple,
      WalletInitializedEvent.OutputObject
    >;
  };
}
