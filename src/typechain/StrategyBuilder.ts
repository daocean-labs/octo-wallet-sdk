/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export interface StrategyBuilderInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "addTactic"
      | "buildTacticsOutOfStrategy"
      | "extractBytes4"
      | "getTacticFunction"
      | "isStrategyValid"
      | "isTacticActive"
      | "owner"
      | "renounceOwnership"
      | "transferOwnership"
      | "validateStrategyTactics"
  ): FunctionFragment;

  getEvent(
    nameOrSignatureOrTopic: "OwnershipTransferred" | "TacticAdded"
  ): EventFragment;

  encodeFunctionData(
    functionFragment: "addTactic",
    values: [BytesLike, AddressLike, BytesLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "buildTacticsOutOfStrategy",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "extractBytes4",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getTacticFunction",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isStrategyValid",
    values: [BytesLike]
  ): string;
  encodeFunctionData(
    functionFragment: "isTacticActive",
    values: [BytesLike]
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "validateStrategyTactics",
    values: [BytesLike[]]
  ): string;

  decodeFunctionResult(functionFragment: "addTactic", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "buildTacticsOutOfStrategy",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "extractBytes4",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getTacticFunction",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isStrategyValid",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "isTacticActive",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "validateStrategyTactics",
    data: BytesLike
  ): Result;
}

export namespace OwnershipTransferredEvent {
  export type InputTuple = [previousOwner: AddressLike, newOwner: AddressLike];
  export type OutputTuple = [previousOwner: string, newOwner: string];
  export interface OutputObject {
    previousOwner: string;
    newOwner: string;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export namespace TacticAddedEvent {
  export type InputTuple = [
    tacticID: BytesLike,
    libAddress: AddressLike,
    functionSelector: BytesLike,
    numArgs: BigNumberish
  ];
  export type OutputTuple = [
    tacticID: string,
    libAddress: string,
    functionSelector: string,
    numArgs: bigint
  ];
  export interface OutputObject {
    tacticID: string;
    libAddress: string;
    functionSelector: string;
    numArgs: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface StrategyBuilder extends BaseContract {
  connect(runner?: ContractRunner | null): StrategyBuilder;
  waitForDeployment(): Promise<this>;

  interface: StrategyBuilderInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  addTactic: TypedContractMethod<
    [
      tacticID: BytesLike,
      libraryAddress: AddressLike,
      functionSelector: BytesLike,
      numArguments: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  buildTacticsOutOfStrategy: TypedContractMethod<
    [strategy: BytesLike],
    [[string[], string[], bigint[]]],
    "view"
  >;

  extractBytes4: TypedContractMethod<[data: BytesLike], [string[]], "view">;

  getTacticFunction: TypedContractMethod<
    [tacticID: BytesLike],
    [[string, bigint, string]],
    "view"
  >;

  isStrategyValid: TypedContractMethod<[data: BytesLike], [boolean], "view">;

  isTacticActive: TypedContractMethod<[tacticID: BytesLike], [boolean], "view">;

  owner: TypedContractMethod<[], [string], "view">;

  renounceOwnership: TypedContractMethod<[], [void], "nonpayable">;

  transferOwnership: TypedContractMethod<
    [newOwner: AddressLike],
    [void],
    "nonpayable"
  >;

  validateStrategyTactics: TypedContractMethod<
    [strategyByteArray: BytesLike[]],
    [boolean],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "addTactic"
  ): TypedContractMethod<
    [
      tacticID: BytesLike,
      libraryAddress: AddressLike,
      functionSelector: BytesLike,
      numArguments: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "buildTacticsOutOfStrategy"
  ): TypedContractMethod<
    [strategy: BytesLike],
    [[string[], string[], bigint[]]],
    "view"
  >;
  getFunction(
    nameOrSignature: "extractBytes4"
  ): TypedContractMethod<[data: BytesLike], [string[]], "view">;
  getFunction(
    nameOrSignature: "getTacticFunction"
  ): TypedContractMethod<
    [tacticID: BytesLike],
    [[string, bigint, string]],
    "view"
  >;
  getFunction(
    nameOrSignature: "isStrategyValid"
  ): TypedContractMethod<[data: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "isTacticActive"
  ): TypedContractMethod<[tacticID: BytesLike], [boolean], "view">;
  getFunction(
    nameOrSignature: "owner"
  ): TypedContractMethod<[], [string], "view">;
  getFunction(
    nameOrSignature: "renounceOwnership"
  ): TypedContractMethod<[], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "transferOwnership"
  ): TypedContractMethod<[newOwner: AddressLike], [void], "nonpayable">;
  getFunction(
    nameOrSignature: "validateStrategyTactics"
  ): TypedContractMethod<[strategyByteArray: BytesLike[]], [boolean], "view">;

  getEvent(
    key: "OwnershipTransferred"
  ): TypedContractEvent<
    OwnershipTransferredEvent.InputTuple,
    OwnershipTransferredEvent.OutputTuple,
    OwnershipTransferredEvent.OutputObject
  >;
  getEvent(
    key: "TacticAdded"
  ): TypedContractEvent<
    TacticAddedEvent.InputTuple,
    TacticAddedEvent.OutputTuple,
    TacticAddedEvent.OutputObject
  >;

  filters: {
    "OwnershipTransferred(address,address)": TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;
    OwnershipTransferred: TypedContractEvent<
      OwnershipTransferredEvent.InputTuple,
      OwnershipTransferredEvent.OutputTuple,
      OwnershipTransferredEvent.OutputObject
    >;

    "TacticAdded(bytes4,address,bytes4,uint8)": TypedContractEvent<
      TacticAddedEvent.InputTuple,
      TacticAddedEvent.OutputTuple,
      TacticAddedEvent.OutputObject
    >;
    TacticAdded: TypedContractEvent<
      TacticAddedEvent.InputTuple,
      TacticAddedEvent.OutputTuple,
      TacticAddedEvent.OutputObject
    >;
  };
}
