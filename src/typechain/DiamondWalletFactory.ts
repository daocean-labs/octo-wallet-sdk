/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  EventFragment,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedLogDescription,
  TypedListener,
  TypedContractMethod,
} from "./common";

export type DiamondArgsStruct = {
  owner: AddressLike;
  entryPoint: AddressLike;
  walletFactory: AddressLike;
  init: AddressLike;
  initCalldata: BytesLike;
};

export type DiamondArgsStructOutput = [
  owner: string,
  entryPoint: string,
  walletFactory: string,
  init: string,
  initCalldata: string
] & {
  owner: string;
  entryPoint: string;
  walletFactory: string;
  init: string;
  initCalldata: string;
};

export declare namespace IDiamond {
  export type FacetCutStruct = {
    facetAddress: AddressLike;
    action: BigNumberish;
    functionSelectors: BytesLike[];
  };

  export type FacetCutStructOutput = [
    facetAddress: string,
    action: bigint,
    functionSelectors: string[]
  ] & { facetAddress: string; action: bigint; functionSelectors: string[] };
}

export interface DiamondWalletFactoryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createDiamondWallet"
      | "getCoreFacetCuts"
      | "getDiamondWalletArgs"
      | "getWalletAddress"
  ): FunctionFragment;

  getEvent(nameOrSignatureOrTopic: "WalletCreated"): EventFragment;

  encodeFunctionData(
    functionFragment: "createDiamondWallet",
    values: [AddressLike, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getCoreFacetCuts",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getDiamondWalletArgs",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "getWalletAddress",
    values: [AddressLike, BigNumberish]
  ): string;

  decodeFunctionResult(
    functionFragment: "createDiamondWallet",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getCoreFacetCuts",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getDiamondWalletArgs",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getWalletAddress",
    data: BytesLike
  ): Result;
}

export namespace WalletCreatedEvent {
  export type InputTuple = [
    wallet: AddressLike,
    owner: AddressLike,
    salt: BigNumberish
  ];
  export type OutputTuple = [wallet: string, owner: string, salt: bigint];
  export interface OutputObject {
    wallet: string;
    owner: string;
    salt: bigint;
  }
  export type Event = TypedContractEvent<InputTuple, OutputTuple, OutputObject>;
  export type Filter = TypedDeferredTopicFilter<Event>;
  export type Log = TypedEventLog<Event>;
  export type LogDescription = TypedLogDescription<Event>;
}

export interface DiamondWalletFactory extends BaseContract {
  connect(runner?: ContractRunner | null): DiamondWalletFactory;
  waitForDeployment(): Promise<this>;

  interface: DiamondWalletFactoryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createDiamondWallet: TypedContractMethod<
    [walletOwner: AddressLike, salt: BigNumberish],
    [string],
    "nonpayable"
  >;

  getCoreFacetCuts: TypedContractMethod<
    [],
    [IDiamond.FacetCutStructOutput[]],
    "view"
  >;

  getDiamondWalletArgs: TypedContractMethod<
    [walletOwner: AddressLike],
    [DiamondArgsStructOutput],
    "view"
  >;

  getWalletAddress: TypedContractMethod<
    [walletOwner: AddressLike, salt: BigNumberish],
    [string],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createDiamondWallet"
  ): TypedContractMethod<
    [walletOwner: AddressLike, salt: BigNumberish],
    [string],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getCoreFacetCuts"
  ): TypedContractMethod<[], [IDiamond.FacetCutStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getDiamondWalletArgs"
  ): TypedContractMethod<
    [walletOwner: AddressLike],
    [DiamondArgsStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getWalletAddress"
  ): TypedContractMethod<
    [walletOwner: AddressLike, salt: BigNumberish],
    [string],
    "view"
  >;

  getEvent(
    key: "WalletCreated"
  ): TypedContractEvent<
    WalletCreatedEvent.InputTuple,
    WalletCreatedEvent.OutputTuple,
    WalletCreatedEvent.OutputObject
  >;

  filters: {
    "WalletCreated(address,address,uint256)": TypedContractEvent<
      WalletCreatedEvent.InputTuple,
      WalletCreatedEvent.OutputTuple,
      WalletCreatedEvent.OutputObject
    >;
    WalletCreated: TypedContractEvent<
      WalletCreatedEvent.InputTuple,
      WalletCreatedEvent.OutputTuple,
      WalletCreatedEvent.OutputObject
    >;
  };
}
