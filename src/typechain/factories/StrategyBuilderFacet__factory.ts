/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Interface, type ContractRunner } from "ethers";
import type {
  StrategyBuilderFacet,
  StrategyBuilderFacetInterface,
} from "../StrategyBuilderFacet";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "condition",
        type: "address",
      },
      {
        internalType: "uint16",
        name: "id",
        type: "uint16",
      },
    ],
    name: "StrategyBuilderFacet__ConditionReverted",
    type: "error",
  },
  {
    inputs: [],
    name: "StrategyBuilderFacet__StrategyAlreadyActive",
    type: "error",
  },
  {
    inputs: [],
    name: "VERSION",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "strategyId",
        type: "uint16",
      },
      {
        components: [
          {
            internalType: "bytes4",
            name: "functionSelector",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "functionCallData",
            type: "bytes",
          },
        ],
        internalType: "struct StrategyBuilderLib.Tactic[]",
        name: "tactics",
        type: "tuple[]",
      },
      {
        components: [
          {
            internalType: "address",
            name: "conditionAddress",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "goToA",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "goToB",
            type: "uint16",
          },
        ],
        internalType: "struct StrategyBuilderLib.Condition[]",
        name: "conditions",
        type: "tuple[]",
      },
      {
        internalType: "uint8[]",
        name: "tacticNumbers",
        type: "uint8[]",
      },
      {
        internalType: "bool[]",
        name: "hasConditions",
        type: "bool[]",
      },
    ],
    name: "addStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "strategyId",
        type: "uint16",
      },
    ],
    name: "executeStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "conditionId",
        type: "uint16",
      },
    ],
    name: "getCondition",
    outputs: [
      {
        components: [
          {
            internalType: "address",
            name: "conditionAddress",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "id",
            type: "uint8",
          },
          {
            internalType: "uint16",
            name: "goToA",
            type: "uint16",
          },
          {
            internalType: "uint16",
            name: "goToB",
            type: "uint16",
          },
        ],
        internalType: "struct StrategyBuilderLib.Condition",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "strategyId",
        type: "uint16",
      },
      {
        internalType: "uint16",
        name: "position",
        type: "uint16",
      },
    ],
    name: "getIndex",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "stepId",
        type: "uint16",
      },
    ],
    name: "getStep",
    outputs: [
      {
        components: [
          {
            internalType: "uint16",
            name: "conditionId",
            type: "uint16",
          },
          {
            internalType: "uint16[]",
            name: "tacticIds",
            type: "uint16[]",
          },
        ],
        internalType: "struct StrategyBuilderLib.StrategyStep",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "strategyId",
        type: "uint16",
      },
    ],
    name: "getStrategy",
    outputs: [
      {
        internalType: "uint16",
        name: "",
        type: "uint16",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "tacticId",
        type: "uint16",
      },
    ],
    name: "getTactic",
    outputs: [
      {
        components: [
          {
            internalType: "bytes4",
            name: "functionSelector",
            type: "bytes4",
          },
          {
            internalType: "bytes",
            name: "functionCallData",
            type: "bytes",
          },
        ],
        internalType: "struct StrategyBuilderLib.Tactic",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint16",
        name: "strategyId",
        type: "uint16",
      },
    ],
    name: "removeStrategy",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

export class StrategyBuilderFacet__factory {
  static readonly abi = _abi;
  static createInterface(): StrategyBuilderFacetInterface {
    return new Interface(_abi) as StrategyBuilderFacetInterface;
  }
  static connect(
    address: string,
    runner?: ContractRunner | null
  ): StrategyBuilderFacet {
    return new Contract(
      address,
      _abi,
      runner
    ) as unknown as StrategyBuilderFacet;
  }
}
